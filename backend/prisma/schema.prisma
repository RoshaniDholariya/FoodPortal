generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donor {
  id                   Int            @id @default(autoincrement())
  email                String         @unique
  password             String
  isVerified           Boolean        @default(false)
  otp                  String?
  otpExpiry            DateTime?
  name                 String?
  address              String?
  city                 String?
  state                String?
  pincode              String?
  phone                String?
  photo                String?
  totalPoints          Int            @default(0)
  points               Int            @default(0)
  certificatesEarned   Int?           @default(0)
  latestCertificateUrl String?
  warning              Int?           @default(0)
  disabledUntil        DateTime? 
  donorType            DonorType?
  restaurantName       String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  FoodDetails          FoodDetails[]
  Ngoconnect           Ngoconnect[]
  notifications        Notification[]
}

model NGO {
  id          Int           @id @default(autoincrement())
  name        String
  address     String
  email       String        @unique
  phoneNumber String
  city        String
  pincode     String
  certificate String
  isApproved  Boolean       @default(false)
  username    String?
  password    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  contactTime String?
  FoodDetails FoodDetails[]
  Ngoconnect  Ngoconnect[]
}

model FoodDetails {
  id              Int      @id @default(autoincrement())
  donorId         Int
  foodType        String
  foodCategory    String
  address         String
  latitude        Float?
  longitude       Float?
  City            String?
  noOfDishes      Int
  preparationDate DateTime
  expiryDate      DateTime
  status          String   @default("available")
  report          String?
  ngoId           Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  donor           Donor    @relation(fields: [donorId], references: [id])
  ngo             NGO?     @relation(fields: [ngoId], references: [id])
}

model contactus {
  id      Int    @id @default(autoincrement())
  name    String
  email   String @unique
  message String
}

model Notification {
  id        Int      @id @default(autoincrement())
  donorId   Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  donor     Donor    @relation(fields: [donorId], references: [id], onDelete: Cascade)
}

model Ngoconnect {
  id            Int      @id @default(autoincrement())
  Date          DateTime
  quantity      Int
  ngoId         Int
  donorId       Int
  status        String   @default("PENDING")
  donorResponse Boolean? @default(false)
  Donor         Donor    @relation(fields: [donorId], references: [id])
  NGO           NGO      @relation(fields: [ngoId], references: [id])
}

enum DonorType {
  INDIVIDUAL
  RESTAURANT
}
